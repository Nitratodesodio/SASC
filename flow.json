[
    {
        "id": "ba153755bb703802",
        "type": "tab",
        "label": "Flow 6",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1d1ab9bd0d9f4c3f",
        "type": "inject",
        "z": "ba153755bb703802",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "hora",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "b4ed44f93fa29096"
            ]
        ]
    },
    {
        "id": "b4ed44f93fa29096",
        "type": "postgresql",
        "z": "ba153755bb703802",
        "name": "",
        "query": "SELECT \n    Clase.cod_clase,\n\n    Clase.sala_real,\n    Clase.fecha,\n    Bloque_horario.hora_inicio,\n    Bloque_horario.hora_fin\nFROM \n    Clase\nINNER JOIN \n    Bloque_horario ON Clase.bloque = Bloque_horario.bloque;\n",
        "postgreSQLConfig": "3695d45695513d8d",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 410,
        "y": 280,
        "wires": [
            [
                "6e81d849d069d122"
            ]
        ]
    },
    {
        "id": "5331ab5a99d666af",
        "type": "mqtt out",
        "z": "ba153755bb703802",
        "name": "Enviar Mensaje Sala",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt-broker1",
        "x": 1180,
        "y": 240,
        "wires": []
    },
    {
        "id": "ae7d9c61aaaacad3",
        "type": "split",
        "z": "ba153755bb703802",
        "name": "Dividir mensajes",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1000,
        "y": 420,
        "wires": [
            [
                "5331ab5a99d666af"
            ]
        ]
    },
    {
        "id": "05ea0ef08c85139a",
        "type": "function",
        "z": "ba153755bb703802",
        "name": "Comparar con planificación",
        "func": "// Formatear la hora actual para asegurar coincidencia con item.hora_inicio en formato HH:MM\nconst currentDate = new Date();\nconst horaActual = `${currentDate.getHours().toString().padStart(2, '0')}:${currentDate.getMinutes().toString().padStart(2, '0')}`;\nnode.warn(`Hora actual formateada: ${horaActual}`);\n\nconst planificacion = msg.payload || [];\n\nlet mensajes = [];\n\nplanificacion.forEach(item => {\n    // Construir el topic asegurando formato válido\n    let topic = `${item.sala_real}`.trim();  // Asegura que no haya espacios\n    topic = topic.replace(/[^a-zA-Z0-9/]/g, '');  // Remueve caracteres no válidos si existen\n\n    // Verificación adicional para asegurarse de que el topic sea válido\n    if (!topic || !/^[a-zA-Z0-9/]+$/.test(topic)) {\n        node.warn(`Tópico inválido detectado: ${topic}`);\n        return;  // Saltar este mensaje si el tópico es inválido\n    }\n\n    // Normalizar el valor de hora_inicio y hora_fin al formato HH:MM\n    const horaInicio = item.hora_inicio.slice(0, 5); // Tomamos solo los primeros 5 caracteres (HH:MM)\n    const horaFin = item.hora_fin.slice(0, 5); // Tomamos solo los primeros 5 caracteres (HH:MM)\n\n    node.warn(`Hora de inicio para la sala ${item.sala_real}: ${horaInicio}`);\n    if (horaActual === horaInicio) {\n        mensajes.push({ topic: topic, payload: \"ON\" });\n        node.warn(`Encendiendo sala ${item.sala_real}`);\n    } else if (horaActual === horaFin) {\n        mensajes.push({ topic: topic, payload: \"OFF\" });\n        node.warn(`Apagando sala ${item.sala_real}`);\n    }\n});\n\n// Publicar mensajes uno a uno configurando msg.topic y msg.payload\nif (mensajes.length > 0) {\n    mensajes.forEach(mensaje => {\n        // Configurar msg para cada mensaje\n        node.send({ topic: mensaje.topic, payload: mensaje.payload });\n    });\n} else {\n    node.warn(\"No hay mensajes generados para el horario actual.\");\n}\n\n// No necesitamos devolver el mensaje original ya que estamos enviando cada mensaje individualmente\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 240,
        "wires": [
            [
                "ae7d9c61aaaacad3"
            ]
        ]
    },
    {
        "id": "6e81d849d069d122",
        "type": "function",
        "z": "ba153755bb703802",
        "name": "Calcular hora actual",
        "func": "const now = new Date();\nconst horaActual = `${now.getHours()}:${now.getMinutes().toString().padStart(2, '0')}`;\nmsg.hora = horaActual;  // Cambia msg.payload para verificar\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 420,
        "wires": [
            [
                "05ea0ef08c85139a"
            ]
        ]
    },
    {
        "id": "3695d45695513d8d",
        "type": "postgreSQLConfig",
        "name": "Obtener clases",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "SCC_TEST_CLASES",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "root",
        "passwordFieldType": "str"
    },
    {
        "id": "mqtt-broker1",
        "type": "mqtt-broker",
        "name": "Broker MQTT",
        "broker": "06bc99c0b5924c838684c04a7a0e45a1.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]